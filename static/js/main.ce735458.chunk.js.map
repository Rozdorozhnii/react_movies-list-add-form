{"version":3,"sources":["components/MovieCard/MovieCard.tsx","components/MoviesList/MoviesList.tsx","components/NewMovie/NewMovie.tsx","App.tsx","index.tsx"],"names":["MovieCard","title","description","imgUrl","imdbUrl","className","src","alt","href","MoviesList","movies","map","movie","imdbId","NewMovie","state","messageTitle","messageImgUrl","messageImdbUrl","messageImdbId","handleFormItemChange","event","setState","prevState","target","name","value","handleOnBlur","checkUrl","url","test","clearForm","onSubmitNewMovieForm","preventDefault","props","addMovie","this","isFormValid","onSubmit","htmlFor","classNames","type","id","placeholder","onChange","onBlur","disabled","Component","App","moviesFromServer","React","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.ce735458.chunk.js","sourcesContent":["import React from 'react';\nimport './MovieCard.scss';\n\ntype Props = Movie;\n\nexport const MovieCard: React.FC<Props> = ({\n  title, description, imgUrl, imdbUrl,\n}) => (\n  <div className=\"card\">\n    <div className=\"card-image\">\n      <figure className=\"image is-4by3\">\n        <img\n          src={imgUrl}\n          alt=\"Film logo\"\n        />\n      </figure>\n    </div>\n    <div className=\"card-content\">\n      <div className=\"media\">\n        <div className=\"media-left\">\n          <figure className=\"image is-48x48\">\n            <img\n              src=\"images/imdb-logo.jpeg\"\n              alt=\"imdb\"\n            />\n          </figure>\n        </div>\n        <div className=\"media-content\">\n          <p className=\"title is-8\">{title}</p>\n        </div>\n      </div>\n\n      <div className=\"content\">\n        {description}\n        <br />\n        <a href={imdbUrl}>IMDB</a>\n      </div>\n    </div>\n  </div>\n);\n","import React from 'react';\n\nimport './MoviesList.scss';\nimport { MovieCard } from '../MovieCard';\n\ninterface Props {\n  movies: Movie[];\n}\n\nexport const MoviesList: React.FC<Props> = ({ movies }) => (\n  <div className=\"movies\">\n    {movies.map(movie => (\n      <MovieCard key={movie.imdbId} {...movie} />\n    ))}\n  </div>\n);\n","import React, { Component } from 'react';\nimport classNames from 'classnames';\n\nimport './NewMovie.scss';\n\ntype Props = {\n  addMovie: (movie: Movie) => void;\n};\n\ntype State = {\n  title: string;\n  messageTitle: string;\n  description: string;\n  imgUrl: string;\n  messageImgUrl: string;\n  imdbUrl: string;\n  messageImdbUrl: string;\n  imdbId: string;\n  messageImdbId: string;\n};\n\nexport class NewMovie extends Component<Props, State> {\n  state: State = {\n    title: '',\n    messageTitle: '',\n    description: '',\n    imgUrl: '',\n    messageImgUrl: '',\n    imdbUrl: '',\n    messageImdbUrl: '',\n    imdbId: '',\n    messageImdbId: '',\n  };\n\n  handleFormItemChange = (event: React.ChangeEvent<HTMLInputElement>\n  | React.ChangeEvent<HTMLTextAreaElement>) => {\n    this.setState(prevState => ({\n      ...prevState,\n      [event.target.name]: event.target.value,\n    }));\n  };\n\n  // handleInputTitle = (event: React.ChangeEvent<HTMLInputElement>) => {\n  //   this.setState({\n  //     title: event?.target.value,\n  //   });\n  // };\n\n  // handleTextAreaDescription = (event: React.ChangeEvent<HTMLTextAreaElement>) => {\n  //   this.setState({\n  //     description: event?.target.value,\n  //   });\n  // };\n\n  // handleInputImgUrl = (event: React.ChangeEvent<HTMLInputElement>) => {\n  //   this.setState({\n  //     imgUrl: event?.target.value,\n  //   });\n  // };\n\n  // handleInputImdbUrl = (event: React.ChangeEvent<HTMLInputElement>) => {\n  //   this.setState({\n  //     imdbUrl: event?.target.value,\n  //   });\n  // };\n\n  // handleInputImdbId = (event: React.ChangeEvent<HTMLInputElement>) => {\n  //   this.setState({\n  //     imdbId: event?.target.value,\n  //   });\n  // };\n\n  // handleOnBlurtTitle() {\n  //   let messageTitle = '';\n\n  //   if (!this.state.title) {\n  //     messageTitle = 'Title required';\n  //   }\n\n  //   this.setState({\n  //     messageTitle,\n  //   });\n  // }\n\n  // handleOnBlurtImgUrl() {\n  //   let messageImgUrl = '';\n\n  //   if (!this.checkUrl(this.state.imgUrl)) {\n  //     messageImgUrl = 'ImgUrl isn\\'t valid';\n  //   }\n\n  //   if (!this.state.imgUrl) {\n  //     messageImgUrl = 'ImgUrl required';\n  //   }\n\n  //   this.setState({\n  //     messageImgUrl,\n  //   });\n  // }\n\n  // handleOnBlurtImdbUrl() {\n  //   let messageImdbUrl = '';\n\n  //   if (!this.checkUrl(this.state.imdbUrl)) {\n  //     messageImdbUrl = 'ImdbUrl isn\\'t valid';\n  //   }\n\n  //   if (!this.state.imdbUrl) {\n  //     messageImdbUrl = 'ImdbUrl required';\n  //   }\n\n  //   this.setState({\n  //     messageImdbUrl,\n  //   });\n  // }\n\n  // handleOnBlurtImdbId(event: React.ChangeEvent<HTMLInputElement>) {\n  //   // eslint-disable-next-line no-console\n  //   console.log(event, event.target.name);\n  //   let messageImdbId = '';\n\n  //   if (!this.state.imdbId) {\n  //     messageImdbId = 'ImdbId required';\n  //   }\n\n  //   this.setState({\n  //     messageImdbId,\n  //   });\n  // }\n\n  handleOnBlur = (event: React.ChangeEvent<HTMLInputElement>) => {\n    switch (event.target.name) {\n      case 'title':\n        if (!this.state.title) {\n          this.setState({\n            messageTitle: 'Title required',\n          });\n        } else {\n          this.setState({\n            messageTitle: '',\n          });\n        }\n\n        break;\n\n      case 'imgUrl':\n        if (this.state.imgUrl) {\n          if (!this.checkUrl(this.state.imgUrl)) {\n            this.setState({\n              messageImgUrl: 'ImgUrl isn\\'t valid',\n            });\n          } else {\n            this.setState({\n              messageImgUrl: '',\n            });\n          }\n        } else {\n          this.setState({\n            messageImgUrl: 'ImgUrl required',\n          });\n        }\n\n        break;\n\n      case 'imdbUrl':\n        if (this.state.imdbUrl) {\n          if (!this.checkUrl(this.state.imdbUrl)) {\n            this.setState({\n              messageImdbUrl: 'ImdbUrl isn\\'t valid',\n            });\n          } else {\n            this.setState({\n              messageImdbUrl: '',\n            });\n          }\n        } else {\n          this.setState({\n            messageImdbUrl: 'ImdbUrl required',\n          });\n        }\n\n        break;\n\n      case 'imdbId':\n        if (!this.state.imdbId) {\n          this.setState({\n            messageImdbId: 'ImdbId required',\n          });\n        } else {\n          this.setState({\n            messageImdbId: '',\n          });\n        }\n\n        break;\n\n      default:\n        break;\n    }\n  };\n\n  checkUrl = (url: string) => {\n    const regex = /(http(s)?:\\/\\/.)?(www\\.)?[-a-zA-Z0-9@:%._+~#=]{2,256}\\.[a-z]{2,6}\\b([-a-zA-Z0-9@:%_+.~#?&//=]*)/g;\n\n    return regex.test(url);\n  };\n\n  clearForm = () => {\n    this.setState({\n      title: '',\n      description: '',\n      imgUrl: '',\n      imdbUrl: '',\n      imdbId: '',\n    });\n  };\n\n  onSubmitNewMovieForm = (event: React.ChangeEvent<HTMLFormElement>) => {\n    event.preventDefault();\n\n    const {\n      title,\n      description,\n      imgUrl,\n      imdbUrl,\n      imdbId,\n    } = this.state;\n\n    const movie: Movie = {\n      title,\n      description,\n      imgUrl,\n      imdbUrl,\n      imdbId,\n    };\n\n    this.props.addMovie(movie);\n    this.clearForm();\n  };\n\n  render() {\n    const {\n      title,\n      messageTitle,\n      description,\n      imgUrl,\n      messageImgUrl,\n      imdbUrl,\n      messageImdbUrl,\n      imdbId,\n      messageImdbId,\n    } = this.state;\n\n    const isFormValid = title && imgUrl && imdbUrl && imdbId && !messageTitle\n      && !messageImgUrl && !messageImdbUrl && !messageImdbId;\n\n    return (\n      <form className=\"form\" onSubmit={this.onSubmitNewMovieForm}>\n        <div className=\"form__item\">\n          <label htmlFor=\"title-input\">\n            New movie title *&nbsp;\n            <input\n              className={classNames('', { 'input-error': messageTitle })}\n              name=\"title\"\n              type=\"text\"\n              id=\"title-input\"\n              placeholder=\"Enter title of movie here\"\n              value={title}\n              onChange={this.handleFormItemChange}\n              onBlur={this.handleOnBlur}\n            />\n            {messageTitle && (\n              <div className=\"message-error\">\n                {messageTitle}\n              </div>\n            )}\n          </label>\n        </div>\n\n        <div className=\"form__item\">\n          <label htmlFor=\"description-input\">\n            Description of new movie&nbsp;\n            <textarea\n              name=\"description\"\n              id=\"description-input\"\n              placeholder=\"Enter description of movie here\"\n              value={description}\n              onChange={this.handleFormItemChange}\n            />\n          </label>\n        </div>\n\n        <div className=\"form__item\">\n          <label htmlFor=\"imgUrl-input\">\n            Link for avatar of movie *&nbsp;\n            <input\n              className={classNames('', { 'input-error': messageImgUrl })}\n              name=\"imgUrl\"\n              type=\"text\"\n              id=\"imgUrl-input\"\n              placeholder=\"Put link for avatar here\"\n              value={imgUrl}\n              onChange={this.handleFormItemChange}\n              onBlur={this.handleOnBlur}\n            />\n            {messageImgUrl && (\n              <div className=\"message-error\">\n                {messageImgUrl}\n              </div>\n            )}\n          </label>\n        </div>\n\n        <div className=\"form__item\">\n          <label htmlFor=\"imdbUrl-input\">\n            Link for movie from IMDb *&nbsp;\n            <input\n              className={classNames('', { 'input-error': messageImdbUrl })}\n              name=\"imdbUrl\"\n              type=\"text\"\n              id=\"imdbUrl-input\"\n              placeholder=\"Put link of movie from IMDb here\"\n              value={imdbUrl}\n              onChange={this.handleFormItemChange}\n              onBlur={this.handleOnBlur}\n            />\n            {messageImdbUrl && (\n              <div className=\"message-error\">\n                {messageImdbUrl}\n              </div>\n            )}\n          </label>\n        </div>\n\n        <div className=\"form__item\">\n          <label htmlFor=\"imdbId-input\">\n            ID from Internet Movie Database *&nbsp;\n            <input\n              className={classNames('', { 'input-error': messageImdbId })}\n              name=\"imdbId\"\n              type=\"text\"\n              id=\"imdbId-input\"\n              placeholder=\"Enter id of movie from IMDb here\"\n              value={imdbId}\n              onChange={this.handleFormItemChange}\n              onBlur={this.handleOnBlur}\n            />\n            {messageImdbId && (\n              <div className=\"message-error\">\n                {messageImdbId}\n              </div>\n            )}\n          </label>\n        </div>\n\n        <button\n          className=\"form__item\"\n          type=\"submit\"\n          disabled={!isFormValid}\n        >\n          Add new movie\n        </button>\n        {!isFormValid && (\n          <div className=\"message-error\">\n            Please fill all fields with *\n          </div>\n        )}\n      </form>\n    );\n  }\n}\n","import React from 'react';\nimport './App.scss';\nimport { MoviesList } from './components/MoviesList';\nimport { NewMovie } from './components/NewMovie';\nimport moviesFromServer from './api/movies.json';\n\ninterface State {\n  movies: Movie[];\n}\n\nexport class App extends React.Component<{}, State> {\n  state: State = {\n    movies: moviesFromServer,\n  };\n\n  addMovie = (movie: Movie) => {\n    this.setState(prevState => ({\n      movies: [...prevState.movies, movie],\n    }));\n  };\n\n  render() {\n    const { movies } = this.state;\n\n    return (\n      <div className=\"page\">\n        <div className=\"page-content\">\n          <MoviesList movies={movies} />\n        </div>\n        <div className=\"sidebar\">\n          <NewMovie addMovie={this.addMovie} />\n        </div>\n      </div>\n    );\n  }\n}\n","import ReactDOM from 'react-dom';\nimport 'bulma/css/bulma.css';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}